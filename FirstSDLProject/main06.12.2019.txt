#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <SDL2/SDL.h>
#include <math.h>

#define WINDOW_W 20
#define WINDOW_H 20
#define PRECISION 0.001
#define PI 3.14159265

static const int width = 1120;
static const int height =600;

int main(int argc, char **argv)
{
    SDL_Window *window = NULL;
    SDL_Renderer *renderer = NULL;
    SDL_Texture *texture = NULL;
    SDL_Rect rect = {100, 100, 100, 100}, dst = {0, 0, 0, 0};
    SDL_Color rouge = {255, 0, 0, 255}, bleu = {0, 0, 255, 255};
    
    
    SDL_Init(SDL_INIT_VIDEO);
    if (SDL_Init(SDL_INIT_VIDEO) == -1) 
    {
        fprintf(stderr, "Erreur d'initialisation de la SDL : %s\n", SDL_GetError()); 
        exit(EXIT_FAILURE); 
    }

    // Create a SDL window
    //undefined x and y positions  x et y : ces arguments correspondent à la position de départ de la fenêtre en pixel
    window = SDL_CreateWindow("Projet Algo",50,50, width, height, SDL_WINDOW_RESIZABLE);
    //gestion des erreurs
    if (window == NULL)
    {
        printf("Erreur lors de la creation d'une fenetre : %s", SDL_GetError());
        return EXIT_FAILURE;
    }

    // Create a renderer (accelerated and in sync with the display refresh rate)
    //le renderer est en fait l'espace où nous allons pouvoir dessiner, écrire
    //       *******SDL_RENDERER_ACCELERATED*****
    //	Utilise l'accélération matérielle, c'est à dire la carte graphique.
    //Il est fortement recommandé de le mettre puisque c'est un des atouts majeurs de la SDL 2.0 par rapport à la SDL 1.2 et surtout parce que c'est beaucoup plus rapide.
    //          ******SDL_RENDERER_PRESENTVSYNC*****
    //	Synchronise le rendu avec la fréquence de rafraîchissement.
    //La fréquence de rafraîchissement correspond au nombre de fois où l'écran est mis à jour par seconde. Ainsi, le rendu sera synchronisé avec celle-ci.
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);

    ////Uint8 r,  Uint8 g , Uint8 b , Uint8  a
    //R, g, b et a correspondent en anglais à red, green, blue et alpha, ce qui en français correspond à rouge, vert, bleu et alpha (la transparence).
    //SDL_SetRenderDrawColor(renderer,0,0, 0, 255);

    //On met le fond en blanc
    //SDL_SetRenderDrawColor(renderer,255,255,255,255);
    //SDL_SetRenderDrawColor(renderer,225,150,255,255);
   // SDL_RenderClear(renderer);

    texture = SDL_CreateTexture(renderer, SDL_PIXELFORMAT_RGBA8888, SDL_TEXTUREACCESS_TARGET, 300, 300);
    if(NULL == texture)
    {
        fprintf(stderr, "Erreur SDL_CreateTexture : %s", SDL_GetError());
        return EXIT_FAILURE;
    }
     SDL_SetRenderTarget(renderer, texture); // La texture est la cible de rendu, maintenant, on dessine sur la texture. 
     SDL_SetRenderDrawColor(renderer, bleu.r, bleu.g, bleu.b, bleu.a);
     SDL_RenderClear(renderer);
     SDL_SetRenderDrawColor(renderer, rouge.r, rouge.g, rouge.b, rouge.a);
     SDL_RenderFillRect(renderer, &rect); /* On dessine un rectangle rouge sur la texture. */

     SDL_SetRenderTarget(renderer, NULL); /* Le renderer est la cible de rendu. */

     /* On récupère les dimensions de la texture, on la copie sur le renderer
       et on met à jour l’écran. */
     SDL_QueryTexture(texture, NULL, NULL, &dst.w, &dst.h);
     SDL_RenderCopy(renderer, texture, NULL, &dst);
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    //SDL_SetTextureColorMod(texture, 255, 255,255);
    //SDL_Rect rect = {50, 50, 100, 100};
    //SDL_SetRenderDrawColor(renderer, 150, 0, 150, 255); /* On dessine en violet */
    //SDL_SetRenderTarget(renderer, texture); /* On va dessiner sur la texture */
    //SDL_RenderFillRect(renderer, &rect);
   // SDL_SetRenderTarget(renderer, NULL);
   // SDL_Rect dst = {0, 0, 650, 650};//l'endroit de renderer où doit être copié la texture
    //SDL_Rect src = {0,0, 100,100};//la partie du texture à copie
   // SDL_RenderCopy(renderer, texture,&src,&dst);

    //SDL_Rect dst = {150, 150, 0, 0};
    //SDL_QueryTexture(texture, NULL, NULL, &dst.w, &dst.h);
    //SDL_RenderCopy(renderer, texture, NULL, &dst);

/*
    //On met le fond en blanc
    SDL_SetRenderDrawColor(renderer,255,255,255,255);
    SDL_RenderClear(renderer);

    //Couleur de dessin :  noir
    SDL_SetRenderDrawColor(renderer,0,0,0,255);

    //dessiner rectangle entourage
    SDL_Rect rect0={320,100,480,400};
    SDL_RenderDrawRect(renderer,&rect0);

    //Couleur de dessin :  autre
    SDL_SetRenderDrawColor(renderer,160,0,160,255);

    // Position x, y, width and height of the rectangle.
    SDL_Rect rect1={320,100,80,80};
     // Draw the edges of the rectangle
    SDL_RenderDrawRect(renderer,&rect1);
    // Fill in the rectangle
    SDL_RenderFillRect(renderer,&rect1);


    //Couleur de dessin :  noir
    SDL_SetRenderDrawColor(renderer,100,0,0,255);


    SDL_Rect rect2={720,420,80,80};
    SDL_RenderDrawRect(renderer,&rect2);
    SDL_RenderFillRect(renderer,&rect2);

    //Couleur de dessin noir
    SDL_SetRenderDrawColor(renderer,0,0,0,255);

    for(int i=0;i<5;i++)
    {
        SDL_RenderDrawLine(renderer,320,100+80*i,800,100+80*i);
    }

    for(int i=0;i<6;i++)
    {
        SDL_RenderDrawLine(renderer,320+80*i,100,320+80*i,500);
    }

    //Dessiner des lignes
    SDL_RenderDrawLine(renderer,0,100,width,100);
    SDL_RenderDrawLine(renderer,0,500,width,500);

    //dessiner un cercle
    for(int j=0;j<12;j++)
    {
        for(double i = 0.0; i < 360; i+= PRECISION)
            SDL_RenderDrawPoint(renderer,100+(WINDOW_W /2 - cos(i)*WINDOW_W / 2),200+(20*j)+(WINDOW_H / 2 - sin(i)* WINDOW_H / 2));
    }

    for(int j=0;j<12;j++)
    {
        for(double i = 0.0; i < 360; i+= PRECISION)
            SDL_RenderDrawPoint(renderer,1020+(WINDOW_W /2 - cos(i)*WINDOW_W / 2),200+(20*j)+(WINDOW_H / 2 - sin(i)* WINDOW_H / 2));
    }

*/
    bool running = true;
    SDL_Event event;
    while(running)
    {
        // Process events
        while(SDL_PollEvent(&event))
        {
            if(event.type == SDL_QUIT)
            {
                running = false;
            }
        }

        // Clear screen
        ///* Clear the entire screen to our selected color. */
        //SDL_RenderClear(renderer);

        // Draw

        // Show what was drawn
        ///* Up until now everything was drawn behind the scenes.
//           This will show the new, red contents of the window. */
        SDL_RenderPresent(renderer);
    }

    // Release resources
    //// Destruction du renderer et de la fenêtre :
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_DestroyTexture(texture);
    //SDL_FreeSurface(surface);
    //SDL_FreeSurface(image); //Équivalent du destroyTexture pour les surface, permet de libérer la mémoire quand on n'a plus besoin d'une surface
    //tous les systèmes initialisés seront arrêtés et libérés de la mémoire.
    ////  SDL_Quit()  --> Arrêt de la SDL (libération de la mémoire).
    SDL_Quit();

    return 0;
}
